[ 필요 API ]
npm
vue : npm i vue
vuex : npm i vuex

[ vue 양식 ]
<template>
  // 실제 HTML 태그가 들어가는 템플릿 
  <breadcrumb :depth1="'test1'" :depth2="'test2'"/> 
</template> 

<script> 
// 스크립트를 정의하는 부분 
import Breadcrumb from './components/Breadcrumb' 

// export default 된 부분이 외부에서 import로 사용할 수 있게 된다. 
export default { 
  // .vue 내부에서 사용되는 model 
  // model 기반으로 vue는 동작된다. 
  name: 'example', 
  data() { 
    return { 
     // 해당 뷰에서 사용할 데이터를 지님
    } 
  }, 
  components: { 
   // import한 vue 템플릿을 하위 템플릿으로 사용
    Breadcrumb 
  }, 
  props: { 
   // 하위 컨포넌트의 템플릿에서 상위 컨포넌트의 데이터를 전달받을 수 있도록 변수를 정의하는 곳
    // breadcrumb태그에서 파라미터를 import로 선언한 하위 컨포넌트인 Breadcrumb.vue에서 
    // 아래와 같이 선언하여 사용할 수 있다. 
    depth1: { 
      type: String 
    }, 
    depth2: { 
      type: String 
    } 
    // this.depth1 = 'test1', this.depth2 = 'test2' 값을 가질 수 있다. 
  }, 
  created() { 
    // DOM이 만들어 지기 전 실행 되는 곳 
    // Data를 사전에 준비할 경우 사용된다. 
  }, 
  mounted() { 
    // DOM에 해당 .vue가 들어가게 되면 실행 되는 곳 
    // onload 상태와 동일하다. DOM 이후에 조작할 경우 이곳에서 수행 
  }, 
  computed: { 
    // 값이 자주 변경됨에 따라, 관련되어 데이터 혹은 view가 바뀌어야 할 경우 사용 
    // method를 바로 연결하면 tic 단위로 계속 실행되기 때문에, 값이 변경할 때만 수행되고, 
    // cache로 남는 computed를 활용하는 것이 성능에 좋음 
  }, 
  methods: { 
    // .vue 내부에서 사용되는 함수를 정의한다. 
    // 이벤트에 따라 실행하거나, 내부적으로 사용되는 함수들을 정의한다. 
  } 
} 
</script> 

<style> 
</style>

[ 데이터 호출 시점 ]
호출 순서 : 1 -> 2

1. 라우터 네비게이션 가드
  - 특정 URL로 접근하기 전의 동작을 정의하는 속성(함수)
  - router.beforeEach
  - beforeRouteEnter
  - beforeRouteUpdate
  - beforeRouteLeave

2. 컴포넌트 라이프 사이클 훅
  - created 활용 : 컴포넌트가 생성되자마자 호출되는 로직


[ 자바스크립트의 비동기 처리 패턴 ]
1. 기존에 자바스크립트의 call back
  $.get('url주소', function(result){
    if(result === 'admin') {
      $.get('ulr주소' function(product){
        console.log(product)
      })
    }
  })

2. promise 형식 : 함수들을 정의하고 그 함수들을 호출하는 형식
  function getId() {
    return new Promise(function(resoleve, reject) {
      $.get('url주소', function(id){
        resoleve(id)
      })
    })
  }

  function getProduct() {
    //...
  }

  function logProduct() {
    //...
  }

  getId().then(function(id){
    if(id === 'admin') {
      $.get('ulr주소' function(product){
        console.log(product)
      })
    }
  })
  .then(getProduct)
  .then(logProduct)
  .catch(function(error){
    console.log(error)
  })

3. async & await 형식
  예제1)
  async function fetchData() {
    let list = await getUserList()
    console.log(list) // userList가 출력된다.
  }

  function getUserList() {
    return new Promise(function(resoleve, reject) {
      let userList = ['user1', 'user2', 'user3']
      resoleve(userList)
    })
  }

  예제2)
  data() {
    return {
      items: []
    }
  }

  async loginUser1() {
    let response = await axios.get('https://jsonplaceholder.typicode.com/users/1')
    if(response.data.id === 1) {
      let list = await axios.get('http://jsonplaceholder.typicode.com/todos')
      this.items = list.data
    }
  }

  예외처리는 try catch로 실행
  async loginUser1() {
    try {
      let response = await axios.get('https://jsonplaceholder.typicode.com/users/1')
      if(response.data.id === 1) {
        let list = await axios.get('http://jsonplaceholder.typicode.com/todos')
        this.items = list.data
      }
    } catch (error) {
      console.log(error)
    }
  }

  [ 외부 라이브러리 모듈화 ]
    - 이유 : Vue.js 관련 라이브러리가 없을 때 일반 라이브러리를 결합할 수 있어야 한다.
    - 종류
      1) 차트
      2) 데이트 피커
      3) 테이블
      4) 스피너


[ 하위 액션 상위에서 받기 ]
하위 component에서 onclick에 this.$emit('refresh:chart') 을 선언
상위에서 v-on:refresh:chart="refresh"로 받아서 상위에 methods에서 실행